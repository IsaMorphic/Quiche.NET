// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Quiche
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "quiche_bindgen";



        [DllImport(__DllName, EntryPoint = "__quiche_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* quiche_version();

        [DllImport(__DllName, EntryPoint = "__quiche_enable_debug_logging", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_enable_debug_logging(delegate* unmanaged[Cdecl]<byte*, void*, void> cb, void* argp);

        [DllImport(__DllName, EntryPoint = "__quiche_config_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Config* quiche_config_new(uint version);

        [DllImport(__DllName, EntryPoint = "__quiche_config_load_cert_chain_from_pem_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_load_cert_chain_from_pem_file(Config* config, byte* path);

        [DllImport(__DllName, EntryPoint = "__quiche_config_load_priv_key_from_pem_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_load_priv_key_from_pem_file(Config* config, byte* path);

        [DllImport(__DllName, EntryPoint = "__quiche_config_load_verify_locations_from_file", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_load_verify_locations_from_file(Config* config, byte* path);

        [DllImport(__DllName, EntryPoint = "__quiche_config_load_verify_locations_from_directory", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_load_verify_locations_from_directory(Config* config, byte* path);

        [DllImport(__DllName, EntryPoint = "__quiche_config_verify_peer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_verify_peer(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_grease", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_grease(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_discover_pmtu", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_discover_pmtu(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_log_keys", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_log_keys(Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_config_enable_early_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_enable_early_data(Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_application_protos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_set_application_protos(Config* config, byte* protos, nuint protos_len);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_amplification_factor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_amplification_factor(Config* config, nuint v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_idle_timeout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_idle_timeout(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_recv_udp_payload_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_recv_udp_payload_size(Config* config, nuint v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_send_udp_payload_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_send_udp_payload_size(Config* config, nuint v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_data(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_stream_data_bidi_local", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_stream_data_bidi_local(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_stream_data_bidi_remote", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_stream_data_bidi_remote(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_stream_data_uni", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_stream_data_uni(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_streams_bidi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_streams_bidi(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_max_streams_uni", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_max_streams_uni(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_ack_delay_exponent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_ack_delay_exponent(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_ack_delay", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_ack_delay(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_disable_active_migration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_disable_active_migration(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_cc_algorithm_name", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_set_cc_algorithm_name(Config* config, byte* algo);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_initial_congestion_window_packets", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_initial_congestion_window_packets(Config* config, nuint packets);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_cc_algorithm", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_cc_algorithm(Config* config, int algo);

        [DllImport(__DllName, EntryPoint = "__quiche_config_enable_hystart", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_enable_hystart(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_enable_pacing", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_enable_pacing(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_pacing_rate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_pacing_rate(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_enable_dgram", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_enable_dgram(Config* config, [MarshalAs(UnmanagedType.U1)] bool enabled, nuint recv_queue_len, nuint send_queue_len);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_connection_window", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_connection_window(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_max_stream_window", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_max_stream_window(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_active_connection_id_limit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_active_connection_id_limit(Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_stateless_reset_token", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_stateless_reset_token(Config* config, byte* v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_disable_dcid_reuse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_set_disable_dcid_reuse(Config* config, [MarshalAs(UnmanagedType.U1)] bool v);

        [DllImport(__DllName, EntryPoint = "__quiche_config_set_ticket_key", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_config_set_ticket_key(Config* config, byte* key, nuint key_len);

        [DllImport(__DllName, EntryPoint = "__quiche_config_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_config_free(Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_header_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_header_info(byte* buf, nuint buf_len, nuint dcil, uint* version, byte* type_, byte* scid, nuint* scid_len, byte* dcid, nuint* dcid_len, byte* token, nuint* token_len);

        [DllImport(__DllName, EntryPoint = "__quiche_accept", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Conn* quiche_accept(byte* scid, nuint scid_len, byte* odcid, nuint odcid_len, sockaddr* local, int local_len, sockaddr* peer, int peer_len, Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_connect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Conn* quiche_connect(byte* server_name, byte* scid, nuint scid_len, sockaddr* local, int local_len, sockaddr* peer, int peer_len, Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_negotiate_version", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_negotiate_version(byte* scid, nuint scid_len, byte* dcid, nuint dcid_len, byte* @out, nuint out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_retry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_retry(byte* scid, nuint scid_len, byte* dcid, nuint dcid_len, byte* new_scid, nuint new_scid_len, byte* token, nuint token_len, uint version, byte* @out, nuint out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_version_is_supported", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_version_is_supported(uint version);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_new_with_tls", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern Conn* quiche_conn_new_with_tls(byte* scid, nuint scid_len, byte* odcid, nuint odcid_len, sockaddr* local, int local_len, sockaddr* peer, int peer_len, Config* config, void* ssl, [MarshalAs(UnmanagedType.U1)] bool is_server);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_set_keylog_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_set_keylog_path(Conn* conn, byte* path);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_set_session", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_set_session(Conn* conn, byte* buf, nuint buf_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_recv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_recv(Conn* conn, byte* buf, nuint buf_len, RecvInfo* info);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_send(Conn* conn, byte* @out, nuint out_len, SendInfo* out_info);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send_quantum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_send_quantum(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send_on_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_send_on_path(Conn* conn, byte* @out, nuint out_len, sockaddr* from, int from_len, sockaddr* to, int to_len, SendInfo* out_info);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send_quantum_on_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_send_quantum_on_path(Conn* conn, sockaddr* local_addr, int local_len, sockaddr* peer_addr, int peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_recv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_stream_recv(Conn* conn, ulong stream_id, byte* @out, nuint buf_len, bool* fin, ulong* out_error_code);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_send", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_stream_send(Conn* conn, ulong stream_id, byte* buf, nuint buf_len, [MarshalAs(UnmanagedType.U1)] bool fin, ulong* out_error_code);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_priority", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_stream_priority(Conn* conn, ulong stream_id, byte urgency, [MarshalAs(UnmanagedType.U1)] bool incremental);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_shutdown", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_stream_shutdown(Conn* conn, ulong stream_id, int direction, ulong err);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_capacity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_stream_capacity(Conn* conn, ulong stream_id);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_readable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_stream_readable(Conn* conn, ulong stream_id);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_readable_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern long quiche_conn_stream_readable_next(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_writable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_stream_writable(Conn* conn, ulong stream_id, nuint len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_writable_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern long quiche_conn_stream_writable_next(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stream_finished", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_stream_finished(Conn* conn, ulong stream_id);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_readable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern StreamIter* quiche_conn_readable(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_writable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern StreamIter* quiche_conn_writable(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_max_send_udp_payload_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_max_send_udp_payload_size(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_timeout_as_nanos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong quiche_conn_timeout_as_nanos(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_timeout_as_millis", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong quiche_conn_timeout_as_millis(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_on_timeout", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_on_timeout(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_close", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_close(Conn* conn, [MarshalAs(UnmanagedType.U1)] bool app, ulong err, byte* reason, nuint reason_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_trace_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_trace_id(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_source_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_source_id(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_source_ids", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ConnIdIter* quiche_conn_source_ids(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_connection_id_iter_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_connection_id_iter_next(ConnIdIter* iter, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_connection_id_iter_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_connection_id_iter_free(ConnIdIter* iter);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_destination_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_destination_id(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_application_proto", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_application_proto(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_peer_cert", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_peer_cert(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_session", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_session(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_established", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_established(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_resumed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_resumed(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_in_early_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_in_early_data(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_readable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_readable(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_draining", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_draining(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_peer_streams_left_bidi", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong quiche_conn_peer_streams_left_bidi(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_peer_streams_left_uni", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong quiche_conn_peer_streams_left_uni(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_closed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_closed(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_timed_out", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_timed_out(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_peer_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_peer_error(Conn* conn, bool* is_app, ulong* error_code, byte** reason, nuint* reason_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_local_error", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_local_error(Conn* conn, bool* is_app, ulong* error_code, byte** reason, nuint* reason_len);

        [DllImport(__DllName, EntryPoint = "__quiche_stream_iter_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_stream_iter_next(StreamIter* iter, ulong* stream_id);

        [DllImport(__DllName, EntryPoint = "__quiche_stream_iter_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_stream_iter_free(StreamIter* iter);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_stats", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_stats(Conn* conn, Stats* @out);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_peer_transport_params", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_peer_transport_params(Conn* conn, TransportParams* @out);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_path_stats", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_path_stats(Conn* conn, nuint idx, PathStats* @out);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_server", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_server(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_max_writable_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_max_writable_len(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_recv_front_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_recv_front_len(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_recv_queue_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_recv_queue_len(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_recv_queue_byte_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_recv_queue_byte_size(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_send_queue_len", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_send_queue_len(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_send_queue_byte_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_send_queue_byte_size(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_recv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_recv(Conn* conn, byte* buf, nuint buf_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_send", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_dgram_send(Conn* conn, byte* buf, nuint buf_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_dgram_purge_outgoing", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_dgram_purge_outgoing(Conn* conn, delegate* unmanaged[Cdecl]<byte*, nuint, bool> f);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_dgram_send_queue_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_dgram_send_queue_full(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_dgram_recv_queue_full", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_is_dgram_recv_queue_full(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send_ack_eliciting", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_send_ack_eliciting(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_send_ack_eliciting_on_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_conn_send_ack_eliciting_on_path(Conn* conn, sockaddr* local, int local_len, sockaddr* peer, int peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_retired_scid_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_conn_retired_scid_next(Conn* conn, byte** @out, nuint* out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_retired_scids", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_retired_scids(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_available_dcids", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_available_dcids(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_scids_left", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_scids_left(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_active_scids", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint quiche_conn_active_scids(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_new_scid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_new_scid(Conn* conn, byte* scid, nuint scid_len, byte* reset_token, [MarshalAs(UnmanagedType.U1)] bool retire_if_needed, ulong* scid_seq);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_probe_path", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_probe_path(Conn* conn, sockaddr* local, int local_len, sockaddr* peer, int peer_len, ulong* seq);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_migrate_source", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_migrate_source(Conn* conn, sockaddr* local, int local_len, ulong* seq);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_migrate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_migrate(Conn* conn, sockaddr* local, int local_len, sockaddr* peer, int peer_len, ulong* seq);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_path_event_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PathEvent* quiche_conn_path_event_next(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_path_event_type(PathEvent* ev);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_new(PathEvent* ev, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_validated", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_validated(PathEvent* ev, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_failed_validation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_failed_validation(PathEvent* ev, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_closed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_closed(PathEvent* ev, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_reused_source_connection_id", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_reused_source_connection_id(PathEvent* ev, ulong* id, sockaddr_storage* old_local, int* old_local_len, sockaddr_storage* old_peer, int* old_peer_len, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_peer_migrated", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_peer_migrated(PathEvent* ev, sockaddr_storage* local, int* local_len, sockaddr_storage* peer, int* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_path_event_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_path_event_free(PathEvent* ev);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_retire_dcid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_retire_dcid(Conn* conn, ulong dcid_seq);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_paths_iter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SocketAddrIter* quiche_conn_paths_iter(Conn* conn, sockaddr* from, nuint from_len);

        [DllImport(__DllName, EntryPoint = "__quiche_socket_addr_iter_next", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_socket_addr_iter_next(SocketAddrIter* iter, sockaddr_storage* peer, nuint* peer_len);

        [DllImport(__DllName, EntryPoint = "__quiche_socket_addr_iter_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_socket_addr_iter_free(SocketAddrIter* iter);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_is_path_validated", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_conn_is_path_validated(Conn* conn, sockaddr* from, nuint from_len, sockaddr* to, nuint to_len);

        [DllImport(__DllName, EntryPoint = "__quiche_conn_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_conn_free(Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_put_varint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_put_varint(byte* buf, nuint buf_len, ulong val);

        [DllImport(__DllName, EntryPoint = "__quiche_get_varint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_get_varint(byte* buf, nuint buf_len, ulong* val);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern H3Config* quiche_h3_config_new();

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_set_max_field_section_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_config_set_max_field_section_size(H3Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_set_qpack_max_table_capacity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_config_set_qpack_max_table_capacity(H3Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_set_qpack_blocked_streams", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_config_set_qpack_blocked_streams(H3Config* config, ulong v);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_enable_extended_connect", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_config_enable_extended_connect(H3Config* config, [MarshalAs(UnmanagedType.U1)] bool enabled);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_config_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_config_free(H3Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_conn_new_with_transport", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern H3Conn* quiche_h3_conn_new_with_transport(Conn* quiche_conn, H3Config* config);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_conn_poll", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern long quiche_h3_conn_poll(H3Conn* conn, Conn* quic_conn, H3Event** ev);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_event_type", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_event_type(H3Event* ev);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_event_for_each_header", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_event_for_each_header(H3Event* ev, delegate* unmanaged[Cdecl]<byte*, nuint, byte*, nuint, void*, int> cb, void* argp);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_for_each_setting", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_for_each_setting(H3Conn* conn, delegate* unmanaged[Cdecl]<ulong, ulong, void*, int> cb, void* argp);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_event_headers_has_body", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_h3_event_headers_has_body(H3Event* ev);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_extended_connect_enabled_by_peer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_h3_extended_connect_enabled_by_peer(H3Conn* conn);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_event_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_event_free(H3Event* ev);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_request", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern long quiche_h3_send_request(H3Conn* conn, Conn* quic_conn, H3Header* headers, nuint headers_len, [MarshalAs(UnmanagedType.U1)] bool fin);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_response", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_send_response(H3Conn* conn, Conn* quic_conn, ulong stream_id, H3Header* headers, nuint headers_len, [MarshalAs(UnmanagedType.U1)] bool fin);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_response_with_priority", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_send_response_with_priority(H3Conn* conn, Conn* quic_conn, ulong stream_id, H3Header* headers, nuint headers_len, H3Priority* priority, [MarshalAs(UnmanagedType.U1)] bool fin);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_body", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_h3_send_body(H3Conn* conn, Conn* quic_conn, ulong stream_id, byte* body, nuint body_len, [MarshalAs(UnmanagedType.U1)] bool fin);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_recv_body", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nint quiche_h3_recv_body(H3Conn* conn, Conn* quic_conn, ulong stream_id, byte* @out, nuint out_len);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_goaway", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_send_goaway(H3Conn* conn, Conn* quic_conn, ulong id);

        /// <summary>
        ///  Sends a PRIORITY_UPDATE frame on the control stream with specified
        ///  request stream ID and priority.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "__quiche_h3_send_priority_update_for_request", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_send_priority_update_for_request(H3Conn* conn, Conn* quic_conn, ulong stream_id, H3Priority* priority);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_take_last_priority_update", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int quiche_h3_take_last_priority_update(H3Conn* conn, ulong prioritized_element_id, delegate* unmanaged[Cdecl]<byte*, ulong, void*, int> cb, void* argp);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_dgram_enabled_by_peer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool quiche_h3_dgram_enabled_by_peer(H3Conn* conn, Conn* quic_conn);

        [DllImport(__DllName, EntryPoint = "__quiche_h3_conn_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void quiche_h3_conn_free(H3Conn* conn);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct sockaddr
    {
        public int ss_family;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct sockaddr_storage
    {
        public int ss_family;
        public fixed byte data[64];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct timespec
    {
        public long tv_sec;
        public long tv_nsec;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Config
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Conn
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct RecvInfo
    {
        public sockaddr* from;
        public int from_len;
        public sockaddr* to;
        public int to_len;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SendInfo
    {
        public sockaddr_storage from;
        public int from_len;
        public sockaddr_storage to;
        public int to_len;
        public timespec at;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct StreamIter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ConnIdIter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Stats
    {
        public nuint recv;
        public nuint sent;
        public nuint lost;
        public nuint retrans;
        public ulong sent_bytes;
        public ulong recv_bytes;
        public ulong acked_bytes;
        public ulong lost_bytes;
        public ulong stream_retrans_bytes;
        public nuint paths_count;
        public ulong reset_stream_count_local;
        public ulong stopped_stream_count_local;
        public ulong reset_stream_count_remote;
        public ulong stopped_stream_count_remote;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct TransportParams
    {
        public ulong peer_max_idle_timeout;
        public ulong peer_max_udp_payload_size;
        public ulong peer_initial_max_data;
        public ulong peer_initial_max_stream_data_bidi_local;
        public ulong peer_initial_max_stream_data_bidi_remote;
        public ulong peer_initial_max_stream_data_uni;
        public ulong peer_initial_max_streams_bidi;
        public ulong peer_initial_max_streams_uni;
        public ulong peer_ack_delay_exponent;
        public ulong peer_max_ack_delay;
        [MarshalAs(UnmanagedType.U1)] public bool peer_disable_active_migration;
        public ulong peer_active_conn_id_limit;
        public nint peer_max_datagram_frame_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PathStats
    {
        public sockaddr_storage local_addr;
        public int local_addr_len;
        public sockaddr_storage peer_addr;
        public int peer_addr_len;
        public nint validation_state;
        [MarshalAs(UnmanagedType.U1)] public bool active;
        public nuint recv;
        public nuint sent;
        public nuint lost;
        public nuint retrans;
        public ulong rtt;
        public nuint cwnd;
        public ulong sent_bytes;
        public ulong recv_bytes;
        public ulong lost_bytes;
        public ulong stream_retrans_bytes;
        public nuint pmtu;
        public ulong delivery_rate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PathEvent
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SocketAddrIter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct H3Config
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct H3Conn
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct H3Event
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct H3Header
    {
        public byte* name;
        public nuint name_len;
        public byte* value;
        public nuint value_len;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct H3Priority
    {
        public byte urgency;
        [MarshalAs(UnmanagedType.U1)] public bool incremental;
    }



}
