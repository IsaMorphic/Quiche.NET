<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0;net8.0-windows</TargetFrameworks>
		<RuntimeIdentifiers>win-x64;win-arm64;osx-x64;osx-arm64;linux-x64;linux-arm64;iossimulator-x64;ios-arm64;android-x64;android-arm64</RuntimeIdentifiers>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<AllowUnsafeBlocks>True</AllowUnsafeBlocks>
		<OutputType>Library</OutputType>
		<LangVersion>preview</LangVersion>
	</PropertyGroup>

	<ItemGroup>
		<Compile Remove="quiche-bindgen\**" />
		<Compile Remove="quiche\**" />
		<Compile Remove="runtimes\**" />
		<Compile Remove="*.git*" />

		<EmbeddedResource Remove="quiche-bindgen\**" />
		<EmbeddedResource Remove="quiche\**" />
		<EmbeddedResource Remove="runtimes\**" />
		<EmbeddedResource Remove="*.git*" />

		<None Remove="quiche-bindgen\**" />
		<None Remove="quiche\**" />
		<None Remove="runtimes\**" />
		<None Remove="*.git*" />
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="LICENSE.txt" />
		<Compile Remove="README.md" />

		<EmbeddedResource Remove="LICENSE.txt" />
		<EmbeddedResource Remove="README.md" />

		<None Include="LICENSE.txt" Pack="true" />
		<None Include="README.md" Pack="true" />
	</ItemGroup>

	<ItemGroup>
		<Compile Remove="NativeMethods.g.cs" />
		<Compile Include="NativeMethods.g.cs" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="csbindgen" Version="1.9.3">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
		<PackageReference Include="System.IO.Pipelines" Version="8.0.0" />
	</ItemGroup>

	<PropertyGroup>
		<RustProfile Condition="'$(Configuration)' == 'Release'">release</RustProfile>
		<RustProfile Condition="'$(Configuration)' == 'Debug'">dev</RustProfile>

		<RustConfiguration Condition="'$(Configuration)' == 'Release'">release</RustConfiguration>
		<RustConfiguration Condition="'$(Configuration)' == 'Debug'">debug</RustConfiguration>

		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'win-x64'">x86_64-pc-windows-msvc</RustTargetTriple>
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'win-arm64'">aarch64-pc-windows-msvc</RustTargetTriple>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'win-x64'">quiche.dll</RustLibraryFileName>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'win-arm64'">quiche.dll</RustLibraryFileName>

		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'linux-x64'">x86_64-unknown-linux-gnu</RustTargetTriple>
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'linux-arm64'">aarch64-unknown-linux-gnu</RustTargetTriple>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'linux-x64'">libquiche.so</RustLibraryFileName>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'linux-arm64'">libquiche.so</RustLibraryFileName>

		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'osx-x64'">x86_64-apple-darwin</RustTargetTriple>
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'osx-arm64'">aarch64-apple-darwin</RustTargetTriple>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'osx-x64'">libquiche.dylib</RustLibraryFileName>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'osx-arm64'">libquiche.dylib</RustLibraryFileName>

		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'iossimulator-x64'">x86_64-apple-ios</RustTargetTriple>
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'ios-arm64'">aarch64-apple-ios</RustTargetTriple>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'iossimulator-x64'">libquiche.dylib</RustLibraryFileName>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'ios-arm64'">libquiche.dylib</RustLibraryFileName>
		
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'android-arm64'">aarch64-linux-android</RustTargetTriple>
		<RustTargetTriple Condition="'$(RuntimeIdentifier)' == 'android-x64'">x86_64-linux-android</RustTargetTriple>
		
		<RustTargetAndroid Condition="'$(RuntimeIdentifier)' == 'android-arm64'">arm64-v8a</RustTargetAndroid>
		<RustTargetAndroid Condition="'$(RuntimeIdentifier)' == 'android-x64'">x86_64</RustTargetAndroid>
		
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'android-arm64'">libquiche.so</RustLibraryFileName>
		<RustLibraryFileName Condition="'$(RuntimeIdentifier)' == 'android-x64'">libquiche.so</RustLibraryFileName>
	</PropertyGroup>

	<ItemGroup>
		<RustTargetOutput Include="quiche/target/$(RustTargetTriple)/$(RustConfiguration)/$(RustLibraryFileName)" />
		<NativeLibs Condition="'$(RuntimeIdentifier)' != ''" Include="runtimes/$(RuntimeIdentifier)/native/$(RustLibraryFileName)" />
    	<None Condition="'$(RuntimeIdentifier)' != ''" Include="@(NativeLibs)">
      		<Pack>true</Pack>
      		<PackageCopyToOutput>true</PackageCopyToOutput>
      		<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    	</None>
	</ItemGroup>

	<Target Condition="'$(RuntimeIdentifier)' != ''" Name="rustc" BeforeTargets="PreBuildEvent">
		<!--NON-ANDROID RUST BUILD-->
		<Exec WorkingDirectory="quiche-bindgen" Condition="!$(RuntimeIdentifier.StartsWith('android'))" 
			  Command="cargo build --profile $(RustProfile) --target $(RustTargetTriple)" />
		<Exec WorkingDirectory="quiche" Condition="!$(RuntimeIdentifier.StartsWith('android'))"
			  Command="cargo build --profile $(RustProfile) --target $(RustTargetTriple) --features ffi" />
		
		<!--ANDROID RUST BUILD-->
		<Exec WorkingDirectory="quiche-bindgen" Condition="$(RuntimeIdentifier.StartsWith('android'))"
			  Command="cargo ndk -t $(RustTargetAndroid) -p 21 -- build --profile $(RustProfile) --features android" />
		<Exec WorkingDirectory="quiche" Condition="$(RuntimeIdentifier.StartsWith('android'))"
			  Command="cargo ndk -t $(RustTargetAndroid) -p 21 -- build --profile $(RustProfile) --features ffi" />
		
		<Copy SourceFiles="@(RustTargetOutput)" DestinationFolder="runtimes/$(RuntimeIdentifier)/native" />
	</Target>
</Project>
